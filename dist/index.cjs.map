{"version":3,"file":"index.cjs","sources":["../src/index.ts"],"sourcesContent":["/** Encapsulating class for all is-checkers.  All methods\n * below this are static so there does not need to be any\n * references to constructors.  This class is meant to be\n * used as a utility class for checking the type of unknown\n * values.  This class is not meant to be instantiated.\n */\nexport default class IsHelper {\n   /** Determine whether any given unknown value is of type array.\n    * Will return false if the value is null or undefined.\n    */\n   public static isArray = <T = unknown>(value: unknown): value is T[] => {\n      if (this.isNullOrUndefined(value)) {\n         return false;\n      }\n\n      return (\n         Array.isArray(value) ||\n         value instanceof Float64Array ||\n         value instanceof Float32Array ||\n         value instanceof Int8Array ||\n         value instanceof Int16Array ||\n         value instanceof Int32Array ||\n         value instanceof Uint8Array ||\n         value instanceof Uint16Array ||\n         value instanceof Uint32Array ||\n         value instanceof Uint8ClampedArray ||\n         value instanceof BigInt64Array ||\n         value instanceof BigUint64Array\n      );\n   };\n\n   /** Determine whether any given unknown value can be converted into a boolean\n    * This includes the number types 1 and 0 and\n    * the string types \"true\", \"false\", \"y\", \"n\", \"yes\", \"no\".\n    * Will return false if the value is null or undefined or is not a boolean.\n    */\n   public static isBoolean = (value: unknown): value is boolean => {\n      return (\n         !IsHelper.isNullOrUndefined(value) &&\n         ((typeof value === \"boolean\" && (value === true || value === false)) ||\n            (typeof value === \"string\" && (value.toLowerCase() === \"true\" || value.toLowerCase() === \"false\")) ||\n            (typeof value === \"string\" && (value as string).toLowerCase() === \"y\") ||\n            (typeof value === \"string\" && (value as string).toLowerCase() === \"n\") ||\n            (typeof value === \"string\" && (value as string).toLowerCase() === \"yes\") ||\n            (typeof value === \"string\" && (value as string).toLowerCase() === \"no\") ||\n            (typeof value === \"string\" && (value as string) === \"1\") ||\n            (typeof value === \"string\" && (value as string) === \"0\") ||\n            value === 1 ||\n            value === 0)\n      );\n   };\n\n   /** Will take any unknown value and attempt to return a true boolean.  Uses the\n    * isBoolean method to determine if the value can be converted to a boolean.  Will\n    * return a default value of false if the value cannot be converted.\n    */\n   public static getBooleanValue = (value: unknown): boolean => {\n      if (!this.isBoolean(value)) {\n         return false;\n      }\n\n      return (\n         (typeof value === \"boolean\" && value === true) ||\n         (typeof value === \"string\" && (value as string).toLowerCase() === \"true\") ||\n         (typeof value === \"string\" && (value as string).toLowerCase() === \"y\") ||\n         (typeof value === \"string\" && (value as string).toLowerCase() === \"yes\") ||\n         (typeof value === \"string\" && (value as string).toLowerCase() === \"1\") ||\n         (value as unknown) === 1\n      );\n   };\n\n   /** Determines whether any unknown value is a JavaScript Date object. */\n   public static isDate = (value: unknown): value is Date => {\n      return Object.prototype.toString.call(value) === \"[object Date]\";\n   };\n\n   /** Determines whether any unknown value is an empty array.  Uses the\n    * isArray method to determine if the value is an array and then checks\n    * the length of the array to determine if it is empty.\n    */\n   public static isEmptyArray = (value: unknown): boolean => {\n      return IsHelper.isArray(value) && value.length === 0;\n   };\n\n   /** Determines whether any unknown value is an empty object.  Uses the\n    * isObject method to determine if the value is an object and then checks\n    * the length of the object to determine if it is empty.  Will return\n    * false if the value cannot be converted into an object */\n   public static isEmptyObject = (value: unknown): boolean => {\n      return IsHelper.isObject(value) && Object.keys(value).length === 0;\n   };\n\n   /** Determines whether any unknown value is an empty string.  Will return\n    * false if the value cannot be converted into a string. */\n   public static isEmptyString = (value: unknown): boolean => {\n      return IsHelper.isString(value) && String(value).length === 0;\n   };\n\n   /** Determines whether any unknown value is an empty string or whitespace.  Will return\n    * false if the value cannot be converted into a string. */\n   public static isEmptyStringOrWhitespace = (value: unknown): boolean => {\n      return IsHelper.isEmptyString(value) || IsHelper.isWhiteSpaceString(value);\n   };\n\n   /** Determines whether any unknown value is a function. */\n   // eslint-disable-next-line @typescript-eslint/no-unsafe-function-type\n   public static isFunction = (value: unknown): value is Function => {\n      return typeof value === \"function\";\n   };\n\n   /** Determines whether any unknown value is in the format of an IP Address (v4). */\n   public static isIpv4 = (value: unknown): boolean => {\n      if (typeof value !== \"string\") {\n         return false;\n      }\n\n      const regex = /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/g;\n\n      return regex.test(value);\n   };\n\n   /** Determines whether an unknown value is an array, and, if it is, returns\n    * if the array is empty.  Will return false if the value is not an array.\n    */\n   public static isNonEmptyArray = (value: unknown): value is unknown[] => {\n      return !IsHelper.isNullOrUndefined(value) && IsHelper.isArray(value) && !IsHelper.isEmptyArray(value);\n   };\n\n   /** Determines if an unknown value is equal to a JavaScript null */\n   public static isNull = (value: unknown): value is null => {\n      return value === null;\n   };\n\n   /** Determines if an unknown value is equal to a JavaScript null or a JavaScript undefined */\n   public static isNullOrUndefined = (value: unknown): value is null | undefined => {\n      return IsHelper.isNull(value) || IsHelper.isUndefined(value);\n   };\n\n   /** Determines if an unknown value is equal to a JavaScript null, a JavaScript\n    * undefined, an empty string, or a string that contains only whitespace. */\n   public static isNullOrUndefinedOrEmptyStringOrWhitespace = (value: unknown): value is null | undefined | \"\" => {\n      return IsHelper.isNullOrUndefined(value) || IsHelper.isEmptyStringOrWhitespace(value);\n   };\n\n   /** Determines if an unknown value can be converted into any type of number. */\n   public static isNumber = (value: unknown): value is number => {\n      if (IsHelper.isNullOrUndefined(value)) {\n         return false;\n      }\n\n      if (typeof value === \"number\") {\n         return true;\n      }\n\n      if (typeof value !== \"string\") {\n         return false;\n      }\n\n      if (IsHelper.isEmptyStringOrWhitespace(value)) {\n         return false;\n      }\n\n      const regex = /^-{0,1}\\d*\\.{0,1}\\d{0,2}$/g;\n\n      return regex.test(String(value));\n   };\n\n   /** Determines if an unknown value can be converted into any type of\n    * number and, if so, is the number greater than zero.\n    */\n   public static isPositiveNumber = (value: unknown): value is number => {\n      if (!IsHelper.isNumber(value)) {\n         return false;\n      }\n\n      if (value <= 0) {\n         return false;\n      }\n\n      return true;\n   };\n\n   /** Determines if an unknown value can be converted into\n    * a number and, if so, is the number a whole integer. */\n   public static isInteger = (value: unknown): value is number => {\n      if (!IsHelper.isNumber(value)) {\n         return false;\n      }\n\n      if (!Number.isInteger(Number.parseFloat(value.toString()))) {\n         return false;\n      }\n\n      return true;\n   };\n\n   /** Determines if an unknown value can be converted into\n    * a number and, if so, is the number a whole integer and its\n    * value greater than zero. */\n   public static isPositiveInteger = (value: unknown): value is number => {\n      if (!IsHelper.isInteger(value)) {\n         return false;\n      }\n\n      if (value <= 0) {\n         return false;\n      }\n\n      return true;\n   };\n\n   /** Determines if an unknown value has the JavaScript primitive type\n    * of object. */\n   public static isObject = (value: unknown): value is object => {\n      return (\n         !IsHelper.isNullOrUndefined(value) &&\n         typeof value === \"object\" &&\n         !IsHelper.isFunction(value) &&\n         Object.prototype.toString.call(value) === \"[object Object]\"\n      );\n   };\n\n   /** Determines if an unknown value has the JavaScript primitive type\n    * of object, and, if so, does it only contain \"model-based\" properties\n    * (anything that can be prototyped). */\n   public static isPlainObject = <T = unknown>(value: unknown): value is Record<string | number | symbol, T> => {\n      if (!this.isObject(value)) {\n         return false;\n      }\n\n      const prototype = Object.getPrototypeOf(value);\n      return prototype === null || prototype === Object.getPrototypeOf({});\n   };\n\n   /** Determines if an unknown value is a string. */\n   public static isString = (value: unknown): value is string => {\n      return typeof value === \"string\";\n   };\n\n   /** Determines if an unknown value is a JavaScript undefined or\n    * equal to the string value of \"undefined\". */\n   public static isUndefined = (value: unknown): value is undefined => {\n      return typeof value === \"undefined\" || value === undefined;\n   };\n\n   /** Determines if an unknown value is a string that contains only whitespace. */\n   public static isWhiteSpaceString = (value: unknown): value is string => {\n      return IsHelper.isString(value) && !IsHelper.isEmptyString(value) && !/\\S/.test(String(value));\n   };\n}\n"],"names":[],"mappings":"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"}